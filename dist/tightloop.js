// Generated by LiveScript 1.6.0
(function(){
  var reg, com, already_created, pkgname, sig, z, l, R, j, main, sanatize, blunder, apply, map, upon, settle, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
  reg = require("./registry");
  com = reg.com, already_created = reg.already_created, pkgname = reg.pkgname, sig = reg.sig;
  z = com.z, l = com.l, R = com.R, j = com.j;
  main = {};
  sanatize = function(x, UFO){
    var cont, unknown;
    switch (R.type(UFO)) {
    case 'Boolean':
    case 'Null':
    case 'Undefined':
    case 'Number':
      if (UFO) {
        return {
          'continue': true,
          error: false,
          value: x
        };
      } else {
        return {
          'continue': false,
          error: true,
          value: x,
          message: ""
        };
      }
    case 'Array':
      cont = UFO[0], unknown = UFO[1];
      if (cont) {
        return {
          'continue': true,
          error: false,
          value: x
        };
      } else {
        return {
          'continue': false,
          error: true,
          value: x,
          message: unknown
        };
      }
    default:
      return {
        'continue': false,
        error: true,
        value: x,
        message: "[" + pkgname + "][typeError][user-supplied-validator] undefined return value."
      };
    }
  };
  blunder = function(fun, put, extra1, extra2){
    var patt, F, message;
    patt = fun[0], F = fun[1];
    switch (patt) {
    case 'err':
      message = (function(){
        switch (typeof F) {
        case 'function':
          return F(put.message, put.path, extra1, extra2);
        default:
          return F;
        }
      }());
      put.message = message;
      return put;
    case 'fix':
      put.value = (function(){
        switch (typeof F) {
        case 'function':
          return F(put.value, put.path, extra1, extra2);
        default:
          return F;
        }
      }());
      put['continue'] = true;
      put.error = false;
      return put;
    default:
      return put;
    }
  };
  apply = function(type, F, val, extra1, extra2){
    switch (type) {
    case 'd':
      return F(val);
    case 'i':
      return F.auth(val, extra1, extra2);
    case 'f':
      return sanatize(val, F(val, extra1, extra2));
    }
  };
  map = function(dtype, fun, value, extra1, extra2){
    var type, F, I, In, put, arr, path, ob, key, val;
    type = fun[0], F = fun[1];
    switch (dtype) {
    case 'arr':
      I = 0;
      In = value.length;
      put = null;
      arr = [];
      while (I < In) {
        put = apply(type, F, value[I], I, extra1);
        if (put.path) {
          path = put.path;
        } else {
          path = [];
        }
        if (put.error) {
          return {
            'continue': false,
            error: true,
            value: value,
            message: put.message,
            path: [I].concat(arrayFrom$(path))
          };
        }
        arr.push(put.value);
        I += 1;
      }
      return {
        'continue': true,
        error: false,
        value: arr
      };
    case 'obj':
      ob = {};
      put = null;
      for (key in value) {
        val = value[key];
        put = apply(type, F, val, key, extra1);
        if (put.path) {
          path = put.path;
        } else {
          path = [];
        }
        if (put.error) {
          return {
            'continue': false,
            error: true,
            value: value,
            message: put.message,
            path: [key].concat(arrayFrom$(path))
          };
        }
        ob[key] = put.value;
      }
      return {
        'continue': true,
        error: false,
        value: ob
      };
    }
  };
  upon = function(arg$, value, extra1, extra2){
    var type, fun, key, shape, G, put, path, arr, I, In, ref$;
    type = arg$[0], fun = arg$[1];
    switch (type) {
    case 'string':
      key = fun[0], shape = fun[1], G = fun[2];
      put = apply(shape, G, value[key], key, extra1);
      if (put.path) {
        path = put.path;
      } else {
        path = [];
      }
      if (put.error) {
        return {
          'continue': false,
          error: true,
          value: value,
          message: put.message,
          path: [key].concat(arrayFrom$(path))
        };
      }
      value[key] = put.value;
      return {
        'continue': true,
        error: false,
        value: value
      };
    case 'array':
      arr = fun[0], shape = fun[1], G = fun[2];
      I = 0;
      In = arr.length;
      while (I < In) {
        key = arr[I];
        put = apply(shape, G, value[key], key, extra1);
        if (put.path) {
          path = put.path;
        } else {
          path = [];
        }
        if (put.error) {
          return {
            'continue': false,
            error: true,
            value: value,
            message: put.message,
            path: [key].concat(arrayFrom$(path))
          };
        }
        value[key] = put.value;
        I += 1;
      }
      return {
        'continue': true,
        error: false,
        value: value
      };
    case 'object':
      I = 0;
      In = fun.length;
      while (I < In) {
        ref$ = fun[I], key = ref$[0], shape = ref$[1], G = ref$[2];
        apply(shape, G, value[key], key, extra1);
        if (put.path) {
          path = put.path;
        } else {
          path = [];
        }
        if (put.error) {
          return {
            'continue': false,
            error: true,
            value: value,
            message: put.message,
            path: [key].concat(arrayFrom$(path))
          };
        }
        value[key] = put.value;
        I += 1;
      }
      return {
        'continue': true,
        error: false,
        value: value
      };
    }
  };
  settle = function(fun, put, dtype, extra1, extra2){
    var type, F, value, i$, len$, ref$, G;
    type = fun[0], F = fun[1];
    value = put.value;
    switch (type) {
    case 'd':
      return F(value);
    case 'i':
      return F.auth(value, extra1, extra2);
    case 'f':
      return sanatize(value, F(value, extra1, extra2));
    case 'map':
      return map(dtype, F, value, extra1, extra2);
    case 'on':
      return upon(F, value, extra1, extra2);
    case 'cont':
      put.value = (function(){
        switch (typeof F) {
        case 'function':
          return F(value, extra1, extra2);
        default:
          return F;
        }
      }());
      return put;
    case 'jam':
      put.message = (function(){
        switch (typeof F) {
        case 'function':
          return F(value, extra1, extra2);
        default:
          return F;
        }
      }());
      put['continue'] = false;
      put.error = true;
      return put;
    case 'alt':
      for (i$ = 0, len$ = fun.length; i$ < len$; ++i$) {
        ref$ = fun[i$], type = ref$[0], G = ref$[1];
        put = apply(type, G, value, extra1, extra2);
        if (put['continue']) {
          return put;
        }
      }
      return put;
    default:
      return put;
    }
  };
  reg.tightloop = function(x, extra1, extra2){
    var state, all, type, I, put, nI, each, J, nJ, fun, patt, nput;
    state = this[sig];
    all = state.all, type = state.type;
    I = 0;
    put = {
      'continue': true,
      error: false,
      value: x
    };
    nI = all.length;
    do {
      each = all[I];
      switch (I % 2) {
      case 0:
        J = 0;
        nJ = each.length;
        do {
          fun = each[J];
          if (put.error) {
            put = blunder(fun, put, extra1, extra2);
          } else {
            put = settle(fun, put, type, extra1, extra2);
          }
          J += 1;
        } while (J < nJ);
        if (put.error) {
          I += 1;
        } else {
          I += 2;
        }
        break;
      case 1:
        J = 0;
        nJ = each.length;
        do {
          fun = each[J];
          patt = fun[0];
          nput = settle(fun, put, type, extra1, extra2);
          if (nput['continue'] && patt === 'alt') {
            put = nput;
            J = nJ;
          } else if (nput['continue']) {
            put = nput;
            I = nI;
            J = nJ;
          } else if (nput.error) {
            J += 1;
          }
        } while (J < nJ);
        I += 1;
      }
    } while (I < nI);
    return put;
  };
}).call(this);
