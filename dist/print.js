// Generated by LiveScript 1.6.0
(function(){
  var reg, com, print, l, z, chalk, R, j, prettyError, pkgname, x$, c, help, pe, show_stack;
  reg = require("./registry");
  com = reg.com, print = reg.print;
  l = com.l, z = com.z, chalk = com.chalk, R = com.R, j = com.j, prettyError = com.prettyError;
  print = reg.print;
  pkgname = reg.pkgname;
  x$ = c = {};
  x$.ok = chalk.green.bold;
  x$.er = chalk.hex("FF0000");
  x$.warn = chalk.hex("FFFFCD");
  x$.err = chalk.red;
  x$.black = chalk.rgb(128, 128, 128).bold;
  help = c.black("[  docs] " + reg.homepage);
  pe = new prettyError();
  pe.skipNodeFiles();
  pe.filterParsedError(function(Error){
    Error._trace = R.takeLast(5, Error._trace);
    return Error;
  });
  pe.skip(function(traceLine, lineNumber){
    if (traceLine.dir === "internal/modules/cjs") {
      return true;
    }
    return false;
  });
  pe.appendStyle({
    "pretty-error > header > title > kind": {
      display: "none"
    },
    "pretty-error > header > colon": {
      display: "none"
    },
    "pretty-error > header > message": {
      display: "none"
    }
  });
  show_stack = function(){
    var E;
    l(help);
    E = pe.render(new Error());
    l(E);
  };
  print.fail = function(filename){
    return function(message){
      l("[TEST ERROR] originating from module", "[" + pkgname + "]", "\n\n- 'npm test' failed at " + filename + ":");
      if (message) {
        l("\n    " + message + "\n");
      }
      process.exitCode = 1;
    };
  };
  print.route = function(data){
    return l(data);
  };
  print.log = function(){
    var all, prop, res$, i$, len$, name, str, I;
    all = Object.entries(this);
    res$ = [];
    for (i$ = 0, len$ = all.length; i$ < len$; ++i$) {
      name = all[i$][0];
      res$.push(name);
    }
    prop = res$;
    str = c.ok("[ " + pkgname + " ]") + c.warn("[ ");
    for (i$ = 0, len$ = prop.length; i$ < len$; ++i$) {
      I = prop[i$];
      str += c.warn(I + " ");
    }
    str += c.warn("]");
    return str;
  };
  module.exports = print;
}).call(this);
