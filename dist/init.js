// Generated by LiveScript 1.6.0
(function(){
  var reg, com, pkg, loopError, print, already_created, internal, z, l, R, j, hop, deepFreeze, uic, custom, dressing, define, be, props, i$, len$, ref$, name, type, F, G, H, showAttr, reqError, integer, boolnum, maybe_boolnum, maybe, list, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
  reg = require("./registry");
  com = reg.com, pkg = reg.pkg, loopError = reg.loopError, print = reg.print;
  already_created = reg.already_created, internal = reg.internal;
  z = com.z, l = com.l, R = com.R, j = com.j, hop = com.hop, deepFreeze = com.deepFreeze, uic = com.uic;
  custom = internal.custom, dressing = internal.dressing, define = internal.define;
  be = custom;
  props = [['obj', 'Object'], ['arr', 'Array'], ['undef', 'Undefined'], ['null', 'Null'], ['num', 'Number'], ['str', 'String'], ['fun', 'Function'], ['bool', 'Boolean']];
  be.not = function(F){
    return be(function(x){
      return !F(x)['continue'];
    });
  };
  be.maybe = function(F){
    return be(F).or(be.undef);
  };
  be.list = function(F){
    return be.arr.map(F);
  };
  be.list[uic] = print.inner;
  be.maybe[uic] = print.inner;
  be.not[uic] = print.inner;
  for (i$ = 0, len$ = props.length; i$ < len$; ++i$) {
    ref$ = props[i$], name = ref$[0], type = ref$[1];
    F = define.base(type);
    dressing(name, F);
    be[name] = F;
    G = define.not_base(type);
    dressing(name, G);
    be.not[name] = G;
    H = define.maybe_base(type);
    dressing(name, H);
    be.maybe[name] = H;
  }
  showAttr = function(props){
    return ["has to be an object with required attributes:", props];
  };
  reqError = hop.immutable.wh(function(){
    var args, i$, len$, key, ref$;
    args = R.flatten(arrayFrom$(arguments));
    for (i$ = 0, len$ = args.length; i$ < len$; ++i$) {
      key = args[i$];
      if (!((ref$ = R.type(key)) === 'String' || ref$ === 'Number')) {
        print.route(['required_input']);
        return true;
      }
    }
    return false;
  }, loopError);
  be.required = reqError.def(function(){
    var props;
    props = R.flatten(arrayFrom$(arguments));
    return be.obj.on(props, be.not.undef.err(showAttr(props)));
  });
  be.maybe.required = function(){
    var req;
    req = be.required.apply(be, arguments);
    return be.maybe(req);
  };
  integer = function(UFO){
    var residue;
    if (!(R.type(UFO) === 'Number')) {
      return {
        'continue': false,
        error: true,
        message: "not an integer ( or number )",
        value: UFO
      };
    }
    residue = Math.abs(UFO - Math.round(UFO));
    if (residue > 0) {
      return {
        'continue': false,
        error: true,
        message: "not an integer",
        value: UFO
      };
    } else {
      return {
        'continue': true,
        error: false,
        value: UFO
      };
    }
  };
  already_created.add(integer);
  boolnum = function(UFO){
    var ref$;
    if ((ref$ = R.type(UFO)) === 'Boolean' || ref$ === 'Number') {
      return {
        'continue': true,
        error: false,
        value: UFO
      };
    } else {
      return {
        'continue': false,
        error: true,
        message: "not a number or boolean",
        value: UFO
      };
    }
  };
  already_created.add(boolnum);
  maybe_boolnum = function(UFO){
    var ref$;
    if ((ref$ = R.type(UFO)) === 'Undefined' || ref$ === 'Boolean' || ref$ === 'Number') {
      return {
        'continue': true,
        error: false,
        value: UFO
      };
    } else {
      return {
        'continue': false,
        error: true,
        message: "not a number or boolean",
        value: UFO
      };
    }
  };
  already_created.add(maybe_boolnum);
  be.int = be(integer);
  be.boolnum = be(boolnum);
  be.maybe.int = be.int.or(be.undef);
  maybe = be.maybe;
  maybe.int.pos = maybe.int.and(function(x){
    if (x >= 0) {
      return true;
    } else {
      return [false, "not a positive integer"];
    }
  });
  maybe.int.neg = maybe.int.and(function(x){
    if (x <= 0) {
      return true;
    } else {
      return [false, "not a negative integer"];
    }
  });
  maybe.boolnum = be(maybe_boolnum);
  list = be.list;
  list.ofstr = list(be.str).err(function(msg, arg$){
    var key;
    key = arg$[0];
    return "value at index " + key + " is not of string type";
  });
  list.ofnum = list(be.num).err(function(msg, arg$){
    var key;
    key = arg$[0];
    return "value at index " + key + " is not of number type";
  });
  maybe.list = {};
  maybe.list.ofstr = maybe(list.ofstr);
  maybe.list.ofnum = maybe(list.ofnum);
  module.exports = be;
}).call(this);
